using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;
using System.IO;
using System;
using System.Security.Cryptography;
using Enigma; // Enigma projenizi ekleyin

namespace Entities.Concrete.EntityFramework.Context;

public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<ContextDb>
{
    public ContextDb CreateDbContext(string[] args)
    {
        // --- Tasarım Zamanı için Manuel Yapılandırma ---
        IConfigurationRoot configuration = new ConfigurationBuilder()
            // appsettings.json dosyasının bulunduğu WebApi projesinin yolunu belirtiyoruz
            .SetBasePath(Path.Combine(Directory.GetCurrentDirectory(), "../WebApi"))
            .AddJsonFile("appsettings.json")
            .Build();

        // Şifrelenmiş connection string'i alıyoruz
        var encryptedDefaultConnection = configuration.GetConnectionString("DatabaseConnection");
        
        // Şifreyi çözmek için gereken Enigma ve KeyCase sınıflarını manuel olarak hazırlıyoruz
        var aesSettings = configuration.GetSection("AesSettings").Get<AesSettings>();
        KeyCase.Instance.SetAesKeys(aesSettings.Key, aesSettings.Vektor);
        Processor processor = new Processor();

        string connectionString;
        using (Aes aes = Aes.Create())
        {
            connectionString = processor.DecryptorSymmetric(encryptedDefaultConnection, aes);
        }
        
        // --- Hem Dapper hem de EF Core için Connection String'i ayarlıyoruz ---
        
        // 1. Dapper'ın statik context'ini manuel olarak yapılandırıyoruz
        DataAccess.Concrete.Dapper.Context.ContextDb.ConfigureWithConnectionString(connectionString);

        // 2. EF Core için DbContextOptions'ı hazırlıyoruz
        var optionsBuilder = new DbContextOptionsBuilder<ContextDb>();
        optionsBuilder.UseSqlServer(connectionString);

        return new ContextDb(optionsBuilder.Options);
    }
}
